#+TITLE: BZM's EMACS CONFIG
#+AUTHOR: BZM

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-scripts-directory-to-path][Adding scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#evil][EVIL]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
- [[#backup][BACKUP]]
- [[#company][COMPANY]]
- [[#dired][DIRED]]
- [[#font-face][FONT FACE]]
  - [[#setting-the-font-face][Setting the font face]]
  - [[#zooming-inout-keybindings][Zooming in/out keybindings]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git time machine]]
  - [[#magit][Magit]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#lsp][LSP]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][VTerm]]
  - [[#vterm-toggle][Vterm-toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#tldr][TLDR]]
- [[#which-key][WHICH KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Adding scripts directory to path
#+begin_src elisp
(add-to-list 'load-path "~/.emacs.d/scripts/")
#+end_src

** Sourcing the scripts
#+begin_src elisp
(require 'melpa-setup)
(require 'buffer-move)
(require 'gui-tweaks)
#+end_src

* ALL THE ICONS
#+begin_src elisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode))))
#+end_src

* EVIL
#+begin_src elisp
(use-package evil
  :init
    (setq evil-want-integration t
          evil-want-keybindings nil
          evil-vsplit-window-right t
          evil-split-window-below t)
    (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config 
    (setq evil-collection-mode-list 
          '(dashboard dired ibuffer))
    (evil-collection-init))

;; To use RETURN to follow links, first unbind this keys
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))

;;  Setting RETURN key in org-mode to follow links
(setq org-return-follows-link t)
#+end_src

* GENERAL KEYBINDINGS
#+begin_src elisp
(use-package general
  :config
  (general-evil-setup)

;; set up 'SPC' as the global leader key
(general-create-definer bzm/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC"
  :global-prefix "M-SPC")
  (bzm/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "TAB TAB" '(comment-line :wk "Comment lines"))
  (bzm/leader-keys
    "b" '(:ignore t :wk "Buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "IBuffer")
    "b k" '(kill-this-buffer :wk "Kill buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))
  (bzm/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d o" '(dired :wk "Open Dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    ;; "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))
  (bzm/leader-keys
    "e" '(:ignore t :wk "Eshell / Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defin :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate an elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e s" '(eshell :wk "Eshell")
    "e h" '(counsel-esh-history :wk "Eshell history"))
  (bzm/leader-keys
    "f" '(:ignore t :wk "Find")
    "f f" '(find-file :wk "Find file")
    "f r" '(counsel-recentf :wk "Find recent file")
    "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config"))
  (bzm/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h o" '(describe-symbol :wk "Describe symbol")
    "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :wk "Reload emacs config"))
  (bzm/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t m" '(vterm-toggle :ok "Toggle Vterm"))
  (bzm/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
  )
#+end_src

* BACKUP
Send all the backup files to trash directory
#+begin_src elisp
(setq backup-directory-alist '((".*" . "~/.emacs.d/backup")))
#+end_src

* COMPANY
Text Completion framwork 
#+begin_src elisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay 0.1)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish 
  :hook (company-mode . company-box-mode))
#+end_src

* DIRED
#+begin_src elisp
(use-package dired-open)
  :config
  (setq dired-open-extensions 
    '(("gif" . "Gwenview")
      ("jpg" . "Gwenview")
      ("png" . "Gwenview")
      ("pdf" . "Okular")
      ("mkv" . "Dragon Player")
      ("mp4" . "Dragon Player")))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") dired-open-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file) 
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+end_src

* FONT FACE
** Setting the font face
#+begin_src elisp
(set-face-attribute 'default nil
  :font "Hack"
  :height 120
  :weight 'regular)
(set-face-attribute 'variable-pitch nil
  :font "DejaVu Sans"
  :height 120
  :weight 'regular)
(set-face-attribute 'fixed-pitch nil
  :font "Hack"
  :height 120
  :weight 'regular)
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
;; This line is for emacs-client to set font face correctly
(add-to-list 'default-frame-alist '(font . "Hack-11"))
(setq-default line-spacing 0.12)
#+end_src

** Zooming in/out keybindings
#+begin_src elisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GIT PROGRAMS
** Git time machine
#+begin_src elisp
(use-package git-timemachine
  :after evil-mode
  :hook (evil-normalize-keymaps . git-timemachine-ok)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kdb "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kdb "C-k") 'git-timemachine-show-next-revision))
#+end_src

** Magit
#+begin_src elisp
(use-package magit)
#+end_src

* HIGHLIGHT TODO
Adding highlights to TODO and related words.
#+begin_src elisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
	 (prog-mode . hl-todo-mode))
  :config
    (setq hl-todo-highlight-punctuation ":"
	  hl-todo-keyword-faces
	  `(("TODO" warning bold)
	    ("FIXME" error bold)
	    ("HACK" font-lock-constant-face bold)
	    ("REVIEW" font-lock-keyword-face bold)
	    ("NOTE" success bold)
	    ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

* IVY (COUNSEL)
Ivy, a generic completion mechanism for emacs.
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
Ivy-rich allows to add descriptions alognside the commands in M-x.
#+begin_src elisp
(use-package counsel
  :after ivy
  :diminish
  :config 
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

* LSP
Clojure 
#+begin_src elisp
(use-package lsp-mode)

(require 'clojure-lsp-setup)

(use-package clojure-mode)

(use-package cider
  :ensure t
  :diminish)
#+end_src

* ORG MODE
** Enabling Table of Contents
#+begin_src elisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
#+begin_src elisp
(add-hook 'orgm-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Code Block Tag Expansion
Org-tempo, shortcuts for source blocks generation with '<s'
#+begin_src elisp
(require 'org-tempo)
#+end_src

* RAINBOW DELIMITERS
#+begin_src elisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
	 (clojure-mode . rainbow-delimiters-mode)))
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value.
#+begin_src elisp
(use-package rainbow-mode
  :hook org-mode prog-mode)
#+end_src

* SHELLS AND TERMINALS
** Eshell
Emacs shell written in elisp.
#+begin_src elisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode 1))

(setq 
  eshell-rc-script (concat user-emacs-directory "eshell/profile")
  eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
  eshell-history-size 5000
  eshell-buffer-maximum-lines 5000
  eshell-hist-to-bottom-on-input t
  eshell-scroll-to-bottom-on-input t
  eshell-destroy-buffer-when-process-dies t
  eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** VTerm
Terminal emulator within Emacs.
#+begin_src elisp
(use-package vterm
  :config 
    (setq 
      shell-file-name "/bin/bash"
      vterm-max-scrollback 5000))
#+end_src

** Vterm-toggle
#+begin_src elisp
(use-package vterm-toggle
  :after vterm
  :config
  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  (setq vterm-toggle-fullscreen-p nil
	vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
	       '((lambda (buffer-or-name _)
		     (let ((buffer (get-buffer buffer-or-name)))
		       (with-current-buffer buffer
			 (or (equal major-mode 'vterm-mode)
			     (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		  (display-buffer-reuse-window display-buffer-at-bottom)
		  ;;(display-buffer-reuse-window display-buffer-in-direction)
		  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		  ;;(direction . bottom)
		  ;;(dedicated . t) ;dedicated is supported in emacs27
		  (reusable-frames . visible)
		  (window-height . 0.3))))
#+end_src

* SUDO EDIT
Sudo-edit package for editing with sudo privilegies
#+begin_src elisp
(use-package sudo-edit
  :config
  (bzm/leader-keys
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* TLDR
#+begin_src elisp
(use-package tldr)
#+end_src

* WHICH KEY
#+begin_src elisp
(use-package which-key
  :init (which-key-mode 1)
  :diminish
  :config
     (setq which-key-side-window-location 'bottom
	   which-key-sort-order #'which-key-key-order-alpha
	   which-key-sort-uppercase-first nil
	   which-key-add-column-padding 1
	   which-key-max-displa-columns nil
	   which-key-min-display-lines 6  
	   which-key-side-window-slot -10
	   which-key-side-window-max-height 0.25
	   which-key-idle-delay 0.05
	   which-key-max-description-length 25
	   which-key-allow-imprecise-window-fit nil 
	   which-key-separator " -> "))
#+end_src
